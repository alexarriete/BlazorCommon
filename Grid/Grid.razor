@inherits BlazorCommon.Grid.GridBase
@namespace BlazorCommon.Grid



@if (GridConfig != null)
{
    <div>
        <div class="row">
            <div class="col-8">
                <h3 style="display:@(!string.IsNullOrWhiteSpace(GridConfig.Title) ?"block": "none")">
                    @GridConfig.Title
                    <span style="font-size:12px">
                        @GridConfig?.QueryResult?.Total items
                    </span>

                </h3>
            </div>
        </div>
        

        @if (GridConfig.QueryResult != null && GridConfig.QueryResult.List != null && GridConfig.GridColumnBases != null)
        {
            <div class="row">
                <SearchBar GridConfiguration="GridConfig" OnSearch="GetFilteredList" OnRemoveFilter="RemoveFilter" Theme="Theme"></SearchBar>
            </div>
            <table class=" table table-bordered table-striped ">
                <thead>
                    <tr class="theme">
                        @foreach (GridColumnBase gridColumn in GridConfig.GridColumnBases.Where(x => !x.KeyColumn).OrderBy(x => x.Position))
                        {                            
                            <td Class="demo-h" SortId="@gridColumn.PropertyInfo.Name">
                                @if (gridColumn.Searchable)
                                {
                                    if(gridColumn.GridSearch == null)
                                    {
                                        <span style="cursor:pointer;color:@(Theme.HeaderFontColor)" Title="@BlazorDic.ColumnFilter" @onclick="()=>OpenCloseFilter(gridColumn)">&#9660;</span>
                                    }
                                  
                                }                                
                                <span @onclick="()=> GridConfig.QueryResult.SortColumn(GridConfig, gridColumn)">
                                @gridColumn.Name <span>@((MarkupString)gridColumn.SortSymbol)</span>
                                </span>
                            </td>

                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in GridConfig.QueryResult.List)
                    {
                        <tr id="@item.RowBaseId">
                            @foreach (GridColumnBase gridColumn in GridConfig.GridColumnBases.Where(x => !x.KeyColumn).OrderBy(x => x.Position))
                            {
                                if (gridColumn.PropertyType == PropertyType.image || gridColumn.PropertyType == PropertyType.imageRag)
                                {
                                    var value = $"<img src='{gridColumn.PropertyInfo.GetValue(item)}' style='max-width:30px'/>";
                                    <td @onclick="() => OnRowClick(item)">@((MarkupString)value)</td>
                                }
                                else if (gridColumn.PropertyType == PropertyType.link || gridColumn.PropertyType == PropertyType.linkHidden)
                                {
                                    var text = gridColumn.PropertyType == PropertyType.link ? gridColumn.PropertyInfo.GetValue(item) : "link";
                                    var value = $"<a href='{gridColumn.PropertyInfo.GetValue(item)}' Target='_blank''/>{text}</a>";
                                    <td>@((MarkupString)value)</td>
                                }
                                else
                                {
                                    <td class="tdColor" @onclick="() => OnRowClick(item)">@gridColumn.PropertyInfo.GetValue(item)</td>
                                }
                            }
                        </tr>
                        @if (item.RowExpanded)
                        {                            
                            <tr>
                                <td colspan="@GridConfig.GridColumnBases.Where(x => !x.KeyColumn).Count()">
                                    <div class="row text-center">
                                    @foreach (ExpandedRowOption ero in item.ExpandedRowOptions)
                                    {          
                                        <div class="col">
                                                <a @onclick="()=>GoToPage(ero, item)" class="btn btn-block form-control text-center theme" style="background-color:@Theme.HeaderColor">@ero.ToString()</a>
                                            </div>
                                    }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div style="display:@(GridConfig.QueryResult.List.Any() && GridConfig.QueryResult.NotFilteredTotal >= GridConfig.QueryResult.PageSize ?"block": "none")">
                <Paginator GridConfig="@GridConfig" GridConfigChanged="@OnPageChanged" />
            </div>
            <div style="display:@(!GridConfig.QueryResult.List.Any() ?"block": "none")">
                <p class="text-danger text-center"> No results found </p>
            </div>

        }
        <div style="display:@(GridConfig.GridColumnBases == null ?"block": "none")">
            <p class="text-danger text-center"> @BlazorDic.NoColumns </p>
        </div>
    </div>
}
else
{
    <p class="text-danger">We can't display the grid. You must implement GridConfiguration. <span class="text-info">"GridConfig=new GridConfigurationBase()</span></p>
}

<ModalGridSearch @ref="ModalGridSearch" GridSearchChanged="AddSearch"/>


<style>
    .theme {
        background-color: @(Theme?.HeaderColor);
        color: @Theme?.HeaderFontColor !important;
    }
</style>